name: Generate macOS Installer

on:
  workflow_dispatch:
    inputs:
      version_selection_method:
        type: choice
        description: "Version Selection Method"
        required: true
        options:
          - Predefined Version
          - Custom Version
      predefined_macos_version:
        type: choice
        description: "Predefined macOS Version (only used if 'Predefined Version' is selected)"
        required: false
        options:
          - Sequoia v15.3.2
          - Sonoma v14.7.4
          - Ventura v13.7.4
          - Monterey v12.7.4
      custom_macos_version:
        type: string
        description: "Custom macOS Version (format: Name vX.Y.Z, only used if 'Custom Version' is selected)"
        required: false
        default: ""
      file:
        type: choice
        description: "File Type"
        required: true
        options:
          - iso
          - dmg
          - zip

run-name: Generate macOS Installer - ${{ github.event.inputs.version_selection_method == 'Predefined Version' && github.event.inputs.predefined_macos_version || github.event.inputs.custom_macos_version }} ${{ github.event.inputs.file }}

env:
  installer_version: "" # Do not touch: Populated by extract-details (suppresses warnings)
  installer_name: "" # Do not touch: Populated by extract-details (suppresses warnings)

jobs:
  build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      # Determine which macOS version to use
      - name: Set macOS Version
        run: |
          if [[ "${{ github.event.inputs.version_selection_method }}" == "Predefined Version" ]]; then
            echo "macos_version=${{ github.event.inputs.predefined_macos_version }}" >> $GITHUB_ENV
          else
            echo "macos_version=${{ github.event.inputs.custom_macos_version }}" >> $GITHUB_ENV
          fi
      
      # Setup
      - name: Extract Version Details
        id: extract-details
        run: |
          string="${{ env.macos_version }}"
          echo "installer_version=${string//*v/}" >> $GITHUB_ENV
          echo "installer_name=${string// v*/}" >> $GITHUB_ENV

      # List Available macOS Versions and Validate Selection
      - name: List Available macOS Versions and Validate Selection
        id: validate_version
        run: |
          echo "Available macOS versions:"
          AVAILABLE_VERSIONS=$(softwareupdate --list-full-installers)
          echo "$AVAILABLE_VERSIONS"

          VERSION_TO_CHECK="${{ env.installer_version }}"
          echo "Checking if version $VERSION_TO_CHECK is available..."

          if echo "$AVAILABLE_VERSIONS" | grep -q "$VERSION_TO_CHECK"; then
            echo "✅ Version $VERSION_TO_CHECK is available!"
            echo "version_exists=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Version $VERSION_TO_CHECK is NOT available!"
            echo "version_exists=false" >> $GITHUB_OUTPUT
            echo "Available versions are listed above. Please select one of these versions."
            exit 1
          fi

          echo "Selected version: ${{ env.macos_version }} (Name: ${{ env.installer_name }}, Version: ${{ env.installer_version }})"

      # Download Installer
      - name: Download macOS Installer
        run: |
          softwareupdate --fetch-full-installer --full-installer-version ${{ env.installer_version }}

      # Generate Installer
      - if: github.event.inputs.file == 'dmg'
        name: Generate macOS DMG Installer
        run: |
          sudo hdiutil create -o /tmp/'${{ env.installer_name }}' -size 16659m -volname '${{ env.installer_name }}' -layout SPUD -fs HFS+J
          sudo hdiutil attach /tmp/'${{ env.installer_name }}'.dmg -noverify -mountpoint /Volumes/'${{ env.installer_name }}'
          sleep 10
          sudo /Applications/'Install macOS ${{ env.installer_name }}'.app/Contents/Resources/createinstallmedia --volume /Volumes/'${{ env.installer_name }}' --nointeraction
          hdiutil eject -force /Volumes/'Install macOS ${{ env.installer_name }}'
          sudo mv /tmp/'${{ env.installer_name }}'.dmg ~/Desktop/'${{ env.installer_name }}-${{ env.installer_version }}'.dmg

      - if: github.event.inputs.file == 'iso'
        name: Generate macOS ISO Installer
        run: |
          sudo hdiutil create -o /tmp/'${{ env.installer_name }}' -size 16659m -volname '${{ env.installer_name }}' -layout SPUD -fs HFS+J
          sudo hdiutil attach /tmp/'${{ env.installer_name }}'.dmg -noverify -mountpoint /Volumes/'${{ env.installer_name }}'
          sleep 20
          sudo /Applications/'Install macOS ${{ env.installer_name }}'.app/Contents/Resources/createinstallmedia --volume /Volumes/'${{ env.installer_name }}' --nointeraction
          echo "Sleeping 100 to allow the installer to finish"
          sleep 100
          hdiutil eject -force /Volumes/'Install macOS ${{ env.installer_name }}'
          hdiutil convert /tmp/'${{ env.installer_name }}'.dmg -format UDTO -o ~/Desktop/'${{ env.installer_name }}'
          mv -v ~/Desktop/'${{ env.installer_name }}'.cdr ~/Desktop/'${{ env.installer_name }}-${{ env.installer_version }}'.iso
          sudo rm -fv /tmp/'${{ env.installer_name }}'.dmg

      - if: github.event.inputs.file == 'zip'
        name: Generate macOS ZIP Installer
        run: |
          cd /Applications
          zip -r 'Install macOS ${{ env.installer_name }}.zip' 'Install macOS ${{ env.installer_name }}.app'
          mv -v 'Install macOS ${{ env.installer_name }}.zip' ~/Desktop/'${{ env.installer_name }}-${{ env.installer_version }}.zip'

      # Output File Size Before Upload
      - name: Output File Size
        if: steps.validate_version.outputs.version_exists == 'true'
        id: output_file_size
        run: |
          # Use $HOME instead of ~ for more reliable expansion
          FILE_PATH="$HOME/Desktop/${{ env.installer_name }}-${{ env.installer_version }}.${{ github.event.inputs.file }}"
      
          echo "Checking file at: $FILE_PATH"
      
          # Check if file exists before trying to get its size
          if [ ! -f "$FILE_PATH" ]; then
            echo "⚠️ WARNING: File not found at $FILE_PATH"
            echo "Listing Desktop contents for debugging:"
            ls -la $HOME/Desktop/
            echo "file_size=NaN" >> $GITHUB_OUTPUT
            exit 0  # Continue workflow despite error
          fi
      
          # Get file size in bytes
          FILE_SIZE_BYTES=$(stat -f %z "$FILE_PATH")
      
          # Convert to human-readable format
          if [ $FILE_SIZE_BYTES -ge 1073741824 ]; then
            FILE_SIZE_HR=$(echo "scale=2; $FILE_SIZE_BYTES / 1073741824" | bc)" GB"
          elif [ $FILE_SIZE_BYTES -ge 1048576 ]; then
            FILE_SIZE_HR=$(echo "scale=2; $FILE_SIZE_BYTES / 1048576" | bc)" MB"
          elif [ $FILE_SIZE_BYTES -ge 1024 ]; then
            FILE_SIZE_HR=$(echo "scale=2; $FILE_SIZE_BYTES / 1024" | bc)" KB"
          else
            FILE_SIZE_HR="$FILE_SIZE_BYTES bytes"
          fi
      
          echo "⚠️ You are about to upload a file of size: $FILE_SIZE_HR"
          echo "file_size=$FILE_SIZE_HR" >> $GITHUB_OUTPUT

      # Upload Installer
      - name: Upload ${{ github.event.inputs.file }}
        id: artifact-upload-step
        uses: actions/upload-artifact@v4
        with:
          name: "macOS ${{ env.installer_name }} v${{ env.installer_version }} (${{ steps.output_file_size.outputs.file_size }})"
          path: "/Users/runner/Desktop/${{ env.installer_name }}-${{ env.installer_version }}.${{ github.event.inputs.file }}"
          compression-level: 9 # best compression
          overwrite: true


      # Add information about accessing the artifact
      - name: Artifact Information
        if: steps.artifact-upload-step.outcome == 'success' && steps.artifact-upload-step.outputs.artifact-id > 0
        run: |
          echo "✅ Build completed successfully!"
          echo "📦 Your macOS installer artifact \"macOS ${{ env.installer_name }} v${{ env.installer_version }} (${{ steps.output_file_size.outputs.file_size }})\" will be available at:"
          echo "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ steps.artifact-upload-step.outputs.artifact-id }}"
          echo ""
          echo "⏳ Artifacts are automatically deleted after 90 days."
          echo "📥 Download your artifact soon to avoid losing it."
